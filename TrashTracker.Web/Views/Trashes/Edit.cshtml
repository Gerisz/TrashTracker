@using TrashTracker.Data.Models.Enums
@model TrashEdit

@{
    ViewData["Title"] = "Edit";
}

<div class="container">
    <h1>@Html.DisplayFor(m => m.Id). szemétpont szerkesztése</h1>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(m => m.Id)
        <div class="form-group">
            <div class="row">
                <div class="col">
                    <div class="form-floating">
                        @Html.EditorFor(m => m.Lat, "",
                                 new
                                 {
                                     htmlAttributes = new
                                     {
                                         @class = "form-control",
                                         placeholder = ""
                                     }
                                 })
                        @Html.LabelFor(m => m.Lat)
                        @Html.ValidationMessageFor(m => m.Lat, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col">
                    <div class="form-floating">
                        @Html.EditorFor(m => m.Long, "",
                                 new
                                 {
                                     htmlAttributes = new
                                     {
                                         @class = "form-control",
                                         placeholder = ""
                                     }
                                 })
                        @Html.LabelFor(m => m.Long)
                        @Html.ValidationMessageFor(m => m.Long, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-auto">
                    <button class="btn btn-primary" onclick="getPosition(); return false;">
                        <i class="fa-solid fa-location-crosshairs"></i> Jelenlegi hely meghatározása
                    </button>
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Note)
            @Html.TextAreaFor(m => m.Note)
            @Html.ValidationMessageFor(m => m.Note, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @foreach (var value in Enum.GetValues<Size>())
            {
                @Html.RadioButtonFor(m => m.Size, value, new { @class = "btn-check" })
                var displayValue = EnumHelper<Size>
                .GetDisplayValue(value);
                var displayIconClass = EnumHelper<Size>
                .GetDisplayIconClass(value);
                @Html.IconLabel(displayValue, displayIconClass,
                         new { @class = "btn btn-primary" })
            }
        </div>
        <div class="form-group">
            @foreach (var value in Model.Accessibilities)
            {
                @Html.CheckBoxFor(_ => value.IsSelected, new { @class = "btn-check" })
                var displayValue = EnumHelper<Accessibility>
                .GetDisplayValue(value.Value);
                var displayIconClass = EnumHelper<Accessibility>
                .GetDisplayIconClass(value.Value);
                @Html.IconLabel(displayValue, displayIconClass,
                         new { @class = "btn btn-primary" })
            }
        </div>
        <div class="form-group">
            @foreach (var value in Model.Types)
            {
                @Html.CheckBoxFor(_ => value.IsSelected, new { @class = "btn-check" })
                var displayValue = EnumHelper<TrashType>
                .GetDisplayValue(value.Value);
                var displayIconClass = EnumHelper<TrashType>
                .GetDisplayIconClass(value.Value);
                @Html.IconLabel(displayValue, displayIconClass,
                         new { @class = "btn btn-primary" })
            }
        </div>
        <div class="row">
            <div class="col form-group">
                <a class="btn btn-danger" href="@Model.PreviousPage">
                    <i class="fa-solid fa-arrow-left"></i> Vissza
                </a>
            </div>
            <div class="col form-group justify-content-right">
                <span data-bs-title="@(Model.TrashoutId != null ? "Nem módosítható" : "")"
                      data-bs-toggle="@(Model.TrashoutId != null ? "tooltip" : "")"
                      data-bs-trigger="hover focus">
                    <button type="submit"
                            class="btn btn-success @(Model.TrashoutId != null ? "disabled" : "")">
                        <i class="fa-solid fa-floppy-disk"></i> Mentés
                    </button>
                </span>
            </div>
        </div>
    }
</div>

<script src="~/js/trash.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
