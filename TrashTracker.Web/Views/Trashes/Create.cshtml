@using TrashTracker.Data.Models.Enums
@using TrashTracker.Web.Utils
@model TrashFromUser

<div class="container">
    <h1>Új hulladékpont bejelentése</h1>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.HiddenFor(m => m.PreviousPage)
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <div class="row">
                <div class="col">
                    <div class="form-floating">
                        @Html.EditorFor(_ => Model.Lat, "",
                                 new
                                 {
                                     htmlAttributes = new
                                     {
                                         @class = "form-control",
                                         placeholder = ""
                                     }
                                 })
                        @Html.LabelFor(_ => Model.Lat)
                        @Html.ValidationMessageFor(_ => Model.Lat, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col">
                    <div class="form-floating">
                        @Html.EditorFor(_ => Model.Long, "",
                                 new
                                 {
                                     htmlAttributes = new
                                     {
                                         @class = "form-control",
                                         placeholder = ""
                                     }
                                 })
                        @Html.LabelFor(_ => Model.Long)
                        @Html.ValidationMessageFor(_ => Model.Long, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-auto">
                    <button class="btn btn-primary" onclick="getPosition(); return false;">
                        <i class="fa-solid fa-location-crosshairs"></i> Jelenlegi hely meghatározása
                    </button>
                </div>
            </div>
        </div>
        <legend>@Html.LabelFor(m => m.Size)</legend>
        <div class="form-group">
            @Html.DropDownListFor(m => m.Size,
                     new List<SelectListItem>(((Size[])Enum.GetValues(typeof(Size)))
                     .Select(s => new SelectListItem()
        {
            Value = s.ToString(),
            Text = EnumHelper<Size>.GetDisplayValue(s)
        })),
                     new { @class = "form-select" })
        </div>
        <legend>@Html.LabelFor(m => m.Accessibilities)</legend>
        <div class="form-group">
            @foreach (var value in Model.Accessibilities)
            {
                @Html.CheckBoxFor(_ => value.IsSelected, new
                    {
                        @class = "btn-check",
                        id = value.Value,
                        name = value.Value
                    })
                var displayValue = EnumHelper<Accessibility>
                .GetDisplayValue(value.Value);
                var displayIconClass = EnumHelper<Accessibility>
                .GetDisplayIconClass(value.Value);
                @Html.IconLabelFor(_ => value.IsSelected, displayValue, displayIconClass,
                         new
                         {
                             @class = "btn btn-outline-primary",
                             @for = value.Value
                         })
            }
        </div>
        <legend>@Html.LabelFor(m => m.Types)</legend>
        <div class="form-group">
            @foreach (var value in Model.Types)
            {
                @Html.CheckBoxFor(_ => value.IsSelected, new
                    {
                        @class = "btn-check",
                        id = value.Value,
                        name = value.Value
                    })
                var displayValue = EnumHelper<TrashType>
                .GetDisplayValue(value.Value);
                var displayIconClass = EnumHelper<TrashType>
                .GetDisplayIconClass(value.Value);
                @Html.IconLabelFor(_ => value.IsSelected, displayValue, displayIconClass,
                         new
                         {
                             @class = "btn btn-outline-primary",
                             @for = value.Value
                         })
            }
        </div>
        <div class="form-group">
            <div class="form-floating">

                @Html.EditorFor(m => m.Note,
                         new
                         {
                             htmlAttributes = new
                             {
                                 @class = "form-control",
                                 placeholder = ""
                             }
                         })
                @Html.LabelFor(m => m.Note)
                @Html.ValidationMessageFor(m => m.Note, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="row">
                <div class="col">
                    <a href="@Model.PreviousPage" class="btn btn-secondary m-3">
                        <i class="fa-solid fa-arrow-left"></i> Vissza
                    </a>
                </div>
                <div class="col d-flex justify-content-end">
                    <button type="submit" class="btn btn-success m-3">
                        <i class="fa-solid fa-plus"></i> Bejelentés
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<script src="~/js/position.js"></script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
