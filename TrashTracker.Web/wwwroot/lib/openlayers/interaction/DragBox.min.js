import Event from"../events/Event.js";import PointerInteraction from"./Pointer.js";import RenderBox from"../render/Box.js";import{mouseActionButton}from"../events/condition.js";const DragBoxEventType={BOXSTART:"boxstart",BOXDRAG:"boxdrag",BOXEND:"boxend",BOXCANCEL:"boxcancel"};class DragBoxEvent extends Event{constructor(t,n,o){super(t),this.coordinate=n,this.mapBrowserEvent=o}}class DragBox extends PointerInteraction{constructor(t){super(),this.on,this.once,this.un,this.box_=new RenderBox((t=t||{}).className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,t.onBoxEnd&&(this.onBoxEnd=t.onBoxEnd),this.startPixel_=null,this.condition_=t.condition||mouseActionButton,this.boxEndCondition_=t.boxEndCondition||this.defaultBoxEndCondition}defaultBoxEndCondition(t,n,o){var e=o[0]-n[0],o=o[1]-n[1];return e*e+o*o>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG,t.coordinate,t))}handleUpEvent(t){this.box_.setMap(null);var n=this.boxEndCondition_(t,this.startPixel_,t.pixel);return n&&this.onBoxEnd(t),this.dispatchEvent(new DragBoxEvent(n?DragBoxEventType.BOXEND:DragBoxEventType.BOXCANCEL,t.coordinate,t)),!1}handleDownEvent(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART,t.coordinate,t)),!0)}onBoxEnd(t){}}export default DragBox;export{DragBoxEvent};