import TileImage from"./TileImage.js";import{createXYZ,extentFromProjection}from"../tilegrid.js";const defaultAttribution='Google Maps<a class="ol-attribution-google-tos" href="https://cloud.google.com/maps-platform/terms/" target="_blank">Terms of Use</a> and <a class="ol-attribution-google-tos" href="https://policies.google.com/privacy" target="_blank">Privacy Policy</a>',createSessionUrl="https://tile.googleapis.com/v1/createSession",tileUrl="https://tile.googleapis.com/v1/2dtiles",maxZoom=22;class Google extends TileImage{constructor(e){var t=!!e.highDpi,o=!(!0===e.overlay);super({attributions:e.attributions||[defaultAttribution],cacheSize:e.cacheSize,crossOrigin:"anonymous",interpolate:e.interpolate,opaque:o,projection:"EPSG:3857",reprojectionErrorThreshold:e.reprojectionErrorThreshold,state:"loading",tileLoadFunction:e.tileLoadFunction,tilePixelRatio:t?2:1,wrapX:void 0===e.wrapX||e.wrapX,transition:e.transition,zDirection:e.zDirection}),this.apiKey_=e.key,this.error_=null;const i={mapType:e.mapType||"roadmap",language:e.language||"en-US",region:e.region||"US"};e.imageFormat&&(i.imageFormat=e.imageFormat),e.scale&&(i.scale=e.scale),t&&(i.highDpi=!0),e.layerTypes&&(i.layerTypes=e.layerTypes),e.styles&&(i.styles=e.styles),!0===e.overlay&&(i.overlay=!0),this.sessionTokenRequest_=i,this.sessionRefreshId_,this.createSession_()}getError(){return this.error_}fetchSessionToken(e,t){return fetch(e,t)}async createSession_(){var e=createSessionUrl+"?key="+this.apiKey_,t={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.sessionTokenRequest_)};const o=await this.fetchSessionToken(e,t);if(o.ok){e=await o.json(),t=this.getTilePixelRatio(1),t=[e.tileWidth/t,e.tileHeight/t];this.tileGrid=createXYZ({extent:extentFromProjection(this.getProjection()),maxZoom:maxZoom,tileSize:t});const r=e.session,a=this.apiKey_;this.tileUrlFunction=function(e,t,o){var i=e[0],s=e[1],e=e[2];return`${tileUrl}/${i}/${s}/${e}?session=${r}&key=`+a};t=1e3*parseInt(e.expiry,10),e=Math.max(t-Date.now()-6e4,1);this.sessionRefreshId_=setTimeout(()=>this.createSession_(),e),this.setState("ready")}else{try{var i=await o.json();this.error_=new Error(i.error.message)}catch{this.error_=new Error("Error fetching session token")}this.setState("error")}}disposeInternal(){clearTimeout(this.sessionRefreshId_),super.disposeInternal()}}export default Google;